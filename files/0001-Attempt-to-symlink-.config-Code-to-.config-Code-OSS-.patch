From ce7771b811d830404315747a8ab9c304789e496d Mon Sep 17 00:00:00 2001
From: Joshua Strobl <joshua@streambits.io>
Date: Fri, 6 Aug 2021 15:13:39 +0300
Subject: [PATCH 1/1] Attempt to symlink .config/Code to .config/Code - OSS if
 Code does not exist.

This ensures some extensions that specifically check for Code will function. Additionally don't bother doing the platform checks. We're on Linux.
---
 .../platform/environment/node/userDataPath.js | 69 +++++--------------
 1 file changed, 19 insertions(+), 50 deletions(-)

diff --git a/src/vs/platform/environment/node/userDataPath.js b/src/vs/platform/environment/node/userDataPath.js
index 1f7196c33e1..6cb7cb3fe16 100644
--- a/src/vs/platform/environment/node/userDataPath.js
+++ b/src/vs/platform/environment/node/userDataPath.js
@@ -12,12 +12,13 @@
 	/**
 	 * @typedef {import('../../environment/common/argv').NativeParsedArgs} NativeParsedArgs
 	 *
+	 * @param {typeof import('fs')} fs
 	 * @param {typeof import('path')} path
 	 * @param {typeof import('os')} os
 	 * @param {string} productName
 	 * @param {string} cwd
 	 */
-	function factory(path, os, productName, cwd) {
+	function factory(fs, path, os, productName, cwd) {
 
 		/**
 		 * @param {NativeParsedArgs} cliArgs
@@ -47,62 +48,29 @@
 		 * @returns {string}
 		 */
 		function doGetUserDataPath(cliArgs) {
-
-			// 1. Support portable mode
-			const portablePath = process.env['VSCODE_PORTABLE'];
-			if (portablePath) {
-				return path.join(portablePath, 'user-data');
-			}
-
-			// 2. Support global VSCODE_APPDATA environment variable
-			let appDataPath = process.env['VSCODE_APPDATA'];
-			if (appDataPath) {
-				return path.join(appDataPath, productName);
-			}
-
-			// With Electron>=13 --user-data-dir switch will be propagated to
-			// all processes https://github.com/electron/electron/blob/1897b14af36a02e9aa7e4d814159303441548251/shell/browser/electron_browser_client.cc#L546-L553
-			// Check VSCODE_PORTABLE and VSCODE_APPDATA before this case to get correct values.
-			// 3. Support explicit --user-data-dir
-			const cliPath = cliArgs['user-data-dir'];
-			if (cliPath) {
-				return cliPath;
-			}
-
-			// 4. Otherwise check per platform
-			switch (process.platform) {
-				case 'win32':
-					appDataPath = process.env['APPDATA'];
-					if (!appDataPath) {
-						const userProfile = process.env['USERPROFILE'];
-						if (typeof userProfile !== 'string') {
-							throw new Error('Windows: Unexpected undefined %USERPROFILE% environment variable');
-						}
-
-						appDataPath = path.join(userProfile, 'AppData', 'Roaming');
+			let appDataPath = process.env['VSCODE_APPDATA'] || process.env['XDG_CONFIG_HOME'] || path.join(os.homedir(), '.config');
+			let codePath = path.join(appDataPath, productName);
+			if (productName == "Code - OSS") { // OSS equivelant
+				let nonOSSPath = path.join(appDataPath, "Code");
+				fs.access(nonOSSPath, fs.constants.F_OK, (error) => { // Access the path
+					if (error) { // File doesn't exist
+						fs.symlinkSync(codePath, nonOSSPath); // Symlink Code - OSS to Code
 					}
-					break;
-				case 'darwin':
-					appDataPath = path.join(os.homedir(), 'Library', 'Application Support');
-					break;
-				case 'linux':
-					appDataPath = process.env['XDG_CONFIG_HOME'] || path.join(os.homedir(), '.config');
-					break;
-				default:
-					throw new Error('Platform not supported');
+				});
 			}
 
-			return path.join(appDataPath, productName);
+			return codePath;
 		}
 
-		return {
-			getUserDataPath
-		};
+        return {
+            getUserDataPath
+        };
 	}
 
 	if (typeof define === 'function') {
-		define(['require', 'path', 'os', 'vs/base/common/network', 'vs/base/common/resources', 'vs/base/common/process'], function (
+		define(['require', 'fs', 'path', 'os', 'vs/base/common/network', 'vs/base/common/resources', 'vs/base/common/process'], function (
 			require,
+			/** @type {typeof import('fs')} */ fs,
 			/** @type {typeof import('path')} */ path,
 			/** @type {typeof import('os')} */ os,
 			/** @type {typeof import('../../../base/common/network')} */ network,
@@ -112,14 +80,15 @@
 			const rootPath = resources.dirname(network.FileAccess.asFileUri('', require));
 			const pkg = require.__$__nodeRequire(resources.joinPath(rootPath, 'package.json').fsPath);
 
-			return factory(path, os, pkg.name, process.cwd());
+			return factory(fs, path, os, pkg.name, process.cwd());
 		}); // amd
 	} else if (typeof module === 'object' && typeof module.exports === 'object') {
 		const pkg = require('../../../../../package.json');
+		const fs = require('fs');
 		const path = require('path');
 		const os = require('os');
 
-		module.exports = factory(path, os, pkg.name, process.env['VSCODE_CWD'] || process.cwd()); // commonjs
+		module.exports = factory(fs, path, os, pkg.name, process.env['VSCODE_CWD'] || process.cwd()); // commonjs
 	} else {
 		throw new Error('Unknown context');
 	}
-- 
2.32.0

